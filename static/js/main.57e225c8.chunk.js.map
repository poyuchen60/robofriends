{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","constants.js","registerServiceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","robotsFetch","state","action","arguments","length","undefined","Object","objectSpread","isPedding","payload","error","fetchRobots","asyncToGenerator","regenerator_default","mark","_callee","dispatch","users","wrap","_context","prev","next","fetch","then","response","json","sent","t0","stop","_x","apply","this","App","_useState","useState","_useState2","slicedToArray","searchField","setSearchField","_useState3","_useState4","count","setCount","_useReducer","useReducer","_useReducer2","_useReducer2$","useEffect","header","useMemo","filteredRobots","filter","robot","toLowerCase","includes","cardList","components_CardList","onClick","c","components_SearchBox","event","target","value","components_Scroll","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","ReactDOM","render","src_containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.57e225c8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user, i) => \r\n          <Card\r\n            key={i}\r\n            id={user.id}\r\n            name={user.name}\r\n            email={user.email}\r\n          />\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'auto', border: '5px solid black', height: '400px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React, { useEffect, useState, useReducer, useMemo } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\nimport {\r\n  ROBOTS_FETCH_PEDDING,\r\n  ROBOTS_FETCH_SUCCESS,\r\n  ROBOTS_FETCH_ERROR\r\n} from \"../constants\";\r\n\r\nconst robotsFetch = (state, action={}) => {\r\n  switch(action.type) {\r\n    case ROBOTS_FETCH_PEDDING:\r\n      return { ...state, isPedding: true };\r\n    case ROBOTS_FETCH_SUCCESS:\r\n      return { ...state, isPedding: false, robots: action.payload };\r\n    case ROBOTS_FETCH_ERROR:\r\n      return { ...state, isPedding: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst fetchRobots = async (dispatch) => {\r\n  dispatch({type: ROBOTS_FETCH_PEDDING});\r\n  try {\r\n    const users = await fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n    dispatch({type: ROBOTS_FETCH_SUCCESS, payload: users})\r\n  } catch(err) {\r\n    dispatch({type: ROBOTS_FETCH_ERROR, payload: err})\r\n  }\r\n}\r\n\r\n\r\n\r\nconst App = () => {\r\n  const [ searchField, setSearchField ] = useState('');\r\n  const [ count, setCount ] = useState(0);\r\n  const [ { robots, isPedding, error }, dispatch ] = useReducer(\r\n    robotsFetch,\r\n    {\r\n      isPedding: false,\r\n      robots: [],\r\n      error: ''\r\n    }\r\n  )\r\n  useEffect(() => {\r\n    fetchRobots(dispatch);\r\n  }, [])\r\n\r\n  const header = useMemo(() => <h1 className='f1'>RoboFriends</h1>, [])\r\n  const filteredRobots = useMemo(() => robots.filter(robot =>{\r\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n  }), [robots, searchField])\r\n\r\n  const cardList = useMemo(() => <CardList robots={filteredRobots} />, [filteredRobots])\r\n  \r\n  return <div className='tc'>\r\n    { header }\r\n    <button onClick={() => setCount(c => c + 1)} >\r\n      {`Count: ${count}`}\r\n    </button>\r\n    <SearchBox\r\n      searchChange={ event => setSearchField(event.target.value)}\r\n    />\r\n    <Scroll>\r\n      {error\r\n        ? <h1>Error</h1>\r\n        : isPedding ? <h1>Loading</h1> : cardList\r\n      }\r\n    </Scroll>\r\n  </div>\r\n}\r\n\r\nexport default App;","const SEARCH_FIELD_CHANGE = \"SEARCH_FIELD_CHANGE\";\r\nconst ROBOTS_FETCH_PEDDING = \"ROBOTS_FETCH_PEDDING\";\r\nconst ROBOTS_FETCH_SUCCESS = \"ROBOTS_FETCH_SUCCESS\";\r\nconst ROBOTS_FETCH_ERROR = \"ROBOTS_FETCH_ERROR\";\r\n\r\nexport {\r\n  SEARCH_FIELD_CHANGE,\r\n  ROBOTS_FETCH_PEDDING,\r\n  ROBOTS_FETCH_SUCCESS,\r\n  ROBOTS_FETCH_ERROR\r\n}","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}